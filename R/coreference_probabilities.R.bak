
#' Coreference probabilities
#'
#' @description
#' Computes coreference probabilities for a given subset of record pairs
#' based on samples of clusterings.
#'
#' @param samples a matrix containing samples of clusterings, where the columns
#'   correspond to records and the rows correspond to samples. Each sample
#'   clustering (row) is encoded as a _membership vector_, which means
#'   records (entries) that share the same value are assigned to the same
#'   cluster.
#' @param pairs record pairs for which an estimate of the posterior
#'   coreference probability is required. The record pairs are assumed to be
#'   stored in a matrix or data.frame, where rows correspond to pairs and
#'   columns correspond to the identifiers for each record in the pair.
#' @param rec_ids a vector specifying the complete set of record identifiers
#'   in canonical order. If NULL, the record identifiers are taken from the
#'   column names of `samples` (if available), otherwise integer indices are
#'   used.
#' @return Returns a vector of pairwise match probabilities for each pair.
#'
#' @export
coreference_probs <- function(samples, pairs, rec_ids=NULL) {
  if (any(is.na(samples))) stop("samples must not contain NAs")

  if (!is.null(rec_ids)) {
    # Check consistent dimensions
    if (length(rec_ids) != ncol(samples))
      stop("length of rec_ids must match number of columns in samples")
  } else {
    # Try to get rec_ids from colnames
    if (!is.null(colnames(samples))) {
      rec_ids <- colnames(samples)
      pairs <- as.character(pairs)
    } else {
      rec_ids <- seq_len(ncol(samples))
    }
  }

  original_dim <- dim(pairs)
  pairs <- match(pairs, rec_ids)
  dim(pairs) <- original_dim

  num_pairs <- nrow(pairs)
  out <- numeric(length=num_pairs)
  for (i in seq_len(num_pairs)) {
    out[i] = mean(samples[,pairs[i,1]] == samples[,pairs[i,2]])
  }

  return(out)
}
