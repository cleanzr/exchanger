// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mp_clusters
Rcpp::List mp_clusters(const Rcpp::IntegerMatrix& samples);
RcppExport SEXP _exer_mp_clusters(SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(mp_clusters(samples));
    return rcpp_result_gen;
END_RCPP
}
// smp_clusters
Rcpp::List smp_clusters(const Rcpp::List& mp_clusters);
RcppExport SEXP _exer_smp_clusters(SEXP mp_clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mp_clusters(mp_clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(smp_clusters(mp_clusters));
    return rcpp_result_gen;
END_RCPP
}
// sample
Rcpp::S4 sample(Rcpp::S4 init_state, int n_samples, int thin_interval, int burnin_interval);
RcppExport SEXP _exer_sample(SEXP init_stateSEXP, SEXP n_samplesSEXP, SEXP thin_intervalSEXP, SEXP burnin_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type init_state(init_stateSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type thin_interval(thin_intervalSEXP);
    Rcpp::traits::input_parameter< int >::type burnin_interval(burnin_intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(sample(init_state, n_samples, thin_interval, burnin_interval));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_exer_mp_clusters", (DL_FUNC) &_exer_mp_clusters, 1},
    {"_exer_smp_clusters", (DL_FUNC) &_exer_smp_clusters, 1},
    {"_exer_sample", (DL_FUNC) &_exer_sample, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_exer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
